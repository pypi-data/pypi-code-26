# Copyright 2014-2018 Intel Corporation.
#
# This software and the related documents are Intel copyrighted  materials,  and
# your use of  them is  governed by the  express license  under which  they were
# provided to you (License).  Unless the License provides otherwise, you may not
# use, modify, copy, publish, distribute,  disclose or transmit this software or
# the related documents without Intel's prior written permission.
#
# This software and the related documents  are provided as  is,  with no express
# or implied  warranties,  other  than those  that are  expressly stated  in the
# License.



from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_data_feature_utils', [dirname(__file__)])
        except ImportError:
            import _data_feature_utils
            return _data_feature_utils
        if fp is not None:
            try:
                _mod = imp.load_module('_data_feature_utils', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _data_feature_utils = swig_import_helper()
    del swig_import_helper
else:
    import _data_feature_utils
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


import daal

_data_feature_utils.DAAL_FLOAT32_swigconstant(_data_feature_utils)
DAAL_FLOAT32 = _data_feature_utils.DAAL_FLOAT32

_data_feature_utils.DAAL_FLOAT64_swigconstant(_data_feature_utils)
DAAL_FLOAT64 = _data_feature_utils.DAAL_FLOAT64

_data_feature_utils.DAAL_INT32_S_swigconstant(_data_feature_utils)
DAAL_INT32_S = _data_feature_utils.DAAL_INT32_S

_data_feature_utils.DAAL_INT32_U_swigconstant(_data_feature_utils)
DAAL_INT32_U = _data_feature_utils.DAAL_INT32_U

_data_feature_utils.DAAL_INT64_S_swigconstant(_data_feature_utils)
DAAL_INT64_S = _data_feature_utils.DAAL_INT64_S

_data_feature_utils.DAAL_INT64_U_swigconstant(_data_feature_utils)
DAAL_INT64_U = _data_feature_utils.DAAL_INT64_U

_data_feature_utils.DAAL_INT8_S_swigconstant(_data_feature_utils)
DAAL_INT8_S = _data_feature_utils.DAAL_INT8_S

_data_feature_utils.DAAL_INT8_U_swigconstant(_data_feature_utils)
DAAL_INT8_U = _data_feature_utils.DAAL_INT8_U

_data_feature_utils.DAAL_INT16_S_swigconstant(_data_feature_utils)
DAAL_INT16_S = _data_feature_utils.DAAL_INT16_S

_data_feature_utils.DAAL_INT16_U_swigconstant(_data_feature_utils)
DAAL_INT16_U = _data_feature_utils.DAAL_INT16_U

_data_feature_utils.DAAL_OTHER_T_swigconstant(_data_feature_utils)
DAAL_OTHER_T = _data_feature_utils.DAAL_OTHER_T

_data_feature_utils.DAAL_SINGLE_swigconstant(_data_feature_utils)
DAAL_SINGLE = _data_feature_utils.DAAL_SINGLE

_data_feature_utils.DAAL_DOUBLE_swigconstant(_data_feature_utils)
DAAL_DOUBLE = _data_feature_utils.DAAL_DOUBLE

_data_feature_utils.DAAL_INT32_swigconstant(_data_feature_utils)
DAAL_INT32 = _data_feature_utils.DAAL_INT32

_data_feature_utils.DAAL_OTHER_swigconstant(_data_feature_utils)
DAAL_OTHER = _data_feature_utils.DAAL_OTHER

_data_feature_utils.DAAL_GEN_FLOAT_swigconstant(_data_feature_utils)
DAAL_GEN_FLOAT = _data_feature_utils.DAAL_GEN_FLOAT

_data_feature_utils.DAAL_GEN_DOUBLE_swigconstant(_data_feature_utils)
DAAL_GEN_DOUBLE = _data_feature_utils.DAAL_GEN_DOUBLE

_data_feature_utils.DAAL_GEN_INTEGER_swigconstant(_data_feature_utils)
DAAL_GEN_INTEGER = _data_feature_utils.DAAL_GEN_INTEGER

_data_feature_utils.DAAL_GEN_BOOLEAN_swigconstant(_data_feature_utils)
DAAL_GEN_BOOLEAN = _data_feature_utils.DAAL_GEN_BOOLEAN

_data_feature_utils.DAAL_GEN_STRING_swigconstant(_data_feature_utils)
DAAL_GEN_STRING = _data_feature_utils.DAAL_GEN_STRING

_data_feature_utils.DAAL_GEN_UNKNOWN_swigconstant(_data_feature_utils)
DAAL_GEN_UNKNOWN = _data_feature_utils.DAAL_GEN_UNKNOWN

_data_feature_utils.DAAL_CATEGORICAL_swigconstant(_data_feature_utils)
DAAL_CATEGORICAL = _data_feature_utils.DAAL_CATEGORICAL

_data_feature_utils.DAAL_ORDINAL_swigconstant(_data_feature_utils)
DAAL_ORDINAL = _data_feature_utils.DAAL_ORDINAL

_data_feature_utils.DAAL_CONTINUOUS_swigconstant(_data_feature_utils)
DAAL_CONTINUOUS = _data_feature_utils.DAAL_CONTINUOUS

def getVectorUpCast(arg1, arg2):
    return _data_feature_utils.getVectorUpCast(arg1, arg2)
getVectorUpCast = _data_feature_utils.getVectorUpCast

def getVectorDownCast(arg1, arg2):
    return _data_feature_utils.getVectorDownCast(arg1, arg2)
getVectorDownCast = _data_feature_utils.getVectorDownCast

def getVectorStrideUpCast(arg1, arg2):
    return _data_feature_utils.getVectorStrideUpCast(arg1, arg2)
getVectorStrideUpCast = _data_feature_utils.getVectorStrideUpCast

def getVectorStrideDownCast(arg1, arg2):
    return _data_feature_utils.getVectorStrideDownCast(arg1, arg2)
getVectorStrideDownCast = _data_feature_utils.getVectorStrideDownCast
from numpy import float64, float32, intc


# This file is compatible with both classic and new-style classes.

cvar = _data_feature_utils.cvar
NumOfIndexNumTypes = cvar.NumOfIndexNumTypes

